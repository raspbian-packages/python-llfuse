2011-12-10, llfuse 0.37.1

   * Fixed a segfault-causing race condition in Lock.acquire() and
     Lock.yield().

2011-12-05, llfuse 0.37

   * Explicitly call fuse_chan_destroy() in llfuse.close(), so
     that the mountpoint becomes inaccessible right away, even
     while the process is still running.

   * Added get_ino_t_bytes() and get_off_t_bytes() that return
     the number of bytes used for representing inode numbers 
     and file offsets.

   * The yield_() method of the global lock now takes an additional
     *count* argument that can be used to yield the lock more than
     once.

   * Changed implementation of global lock. The global lock is
     no longer a mutex, but a boolean variable protected by a mutex,
     and changes are tracked with a condition object. This allows
     lock.yield() to work properly: if there are other threads waiting
     for the lock, they are guaranteed to run. If there are no other
     threads waiting for the lock, execution of the active thread
     continues immediately.

     The previous implementation using sched_yield() was mostly
     broken: threads trying to acquire the global lock were calling
     pthread_mutex_lock, so they got removed from the kernels
     runqueue. However, calls to sched_yield() would just put the
     active thread into the expired runqueue, and calls to
     pthread_mutex_unlock apparently do not synchronously move the
     threads waiting for the lock back to a runqueue. Therefore, most
     of the time the active thread would be the only thread in any
     runqueue and thus continue to run.

   * The Operations.forget() method now receives a list of
     (inode, nlookup) tuples rather than just one such tuple.

   * invalidate_entry() and invalidate_inode() no longer work
     synchronously. Instead, the message is put in a queue and send by
     a background thread.

   * The acquire() method of the global lock now has an optional
     *timeout* parameter.

   * The create() request handler now receives the open flags
     as an additional parameter.

2011-09-20, llfuse 0.36

   * Don't send SIGHUP if exception is encountered in destroy()
     handler (since at that point, main loop has already terminated
     and signal handling been reset).

   * Fix a problem with request handler exceptions being re-raised
     not only in llfuse.main(), but also in llfuse.close() when
     running single threaded.

2011-09-14, llfuse 0.35

   * Explicitly initialize Python thread support. Previously, calling
     llfuse.main() resulted in a crash if no Python threads were used
     before the call.

   * Removed handle_exc() method. If request handle raise an exception,
     the main loop now terminates and the exception is re-raised and
     passed to the caller of llfuse.main().
   
   * llfuse.close() can now leave the mountpoint in an inaccessible
     state to signal a shutdown due to an internal file system
     error.

   * The destroy() request handler is now called without the
     global lock acquired. This makes sense, because it's not called
     as part of the main loop but by llfuse.close().

2011-08-10, llfuse 0.34

   * Explicitly cast S_* constants to mode_t to prevent compiler
     warnings on FreeBSD.

   * Fixed initialization error under Python 3.


2011-07-03, llfuse 0.33

   * Various small bugfixes.


2011-06-04, llfuse 0.32

   * Fixed unlink() bug in contrib/example.py

   * Include src/*.pxi files in release tarball. Were 
     accidentally omitted in previous version.

   * Moved debian/ directory into separate repository.


2011-05-12, llfuse 0.31

  * Use long for storing nanoseconds in file [amc]times, not int.


2011-03-08, llfuse 0.30

  * Fixed compile errors with Python 3.0 and 3.1.
  * Fixed error handling, errno is now read correctly.
  * Documentation is now shipped in tarball rather than generated
    during installation.


2010-12-30, llfuse 0.29

  * Initial release
